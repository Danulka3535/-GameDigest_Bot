from dotenv import load_dotenv
load_dotenv()
import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "7833684593:AAFS5kf94T15kT9cd9DNmk-__tz4oRu8nBc"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

class Form(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_confirmation = State()
    waiting_for_student_name = State()

def create_keyboard(buttons):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=button)] for button in buttons],
        resize_keyboard=True,
        one_time_keyboard=True
    )

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É—á–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.\n–ö–æ–º—É –≤—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?")
    await state.set_state(Form.waiting_for_recipient)

# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –ó–î–ï–°–¨
@dp.message(Form.waiting_for_recipient)
async def process_recipient(message: Message, state: FSMContext):
    recipient_username = message.text.strip().lstrip("@")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ username
    if not recipient_username.isalnum() or len(recipient_username) < 5:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username. –ü—Ä–∏–º–µ—Ä: @username")
        return

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        chat = await bot.get_chat(f"@{recipient_username}")
        if chat.type != "private":
            await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç. –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
            
        recipient_id = chat.id
    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        await message.answer("1. Username –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)")
        await message.answer("2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–∫—Ä—ã–ª username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏")
        return
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await state.update_data(recipient_id=recipient_id)
    await message.answer(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: @{recipient_username}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=create_keyboard(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"])
    )
    await state.set_state(Form.waiting_for_confirmation)
# –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö –ó–ê–ö–ê–ù–ß–ò–í–ê–ï–¢–°–Ø –ó–î–ï–°–¨

@dp.message(Form.waiting_for_confirmation, F.text.in_(["–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]))
async def confirm_action(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    data = await state.get_data()
    recipient_id = data.get("recipient_id")
    if not recipient_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å.")
        await state.clear()
        return

    await bot.send_message(
        recipient_id,
        "–í–∞–º —Ö–æ—Ç—è—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —É—á–µ—Ç—É –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç–µ?",
        reply_markup=create_keyboard(["–ü—Ä–∏–Ω—è—Ç—å", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"])
    )
    await state.update_data(sender_id=message.from_user.id)
    await state.set_state(Form.waiting_for_student_name)

@dp.message(F.text.in_(["–ü—Ä–∏–Ω—è—Ç—å", "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"]))
async def recipient_response(message: Message, state: FSMContext):
    if message.text == "–û—Ç–∫–ª–æ–Ω–∏—Ç—å":
        sender_data = await state.get_data()
        sender_id = sender_data.get("sender_id")
        if sender_id:
            await bot.send_message(sender_id, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.", reply_markup=ReplyKeyboardRemove())
        await message.answer("–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    await message.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ.", reply_markup=ReplyKeyboardRemove())
    sender_data = await state.get_data()
    sender_id = sender_data.get("sender_id")
    if sender_id:
        await bot.send_message(sender_id, "–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_student_name)

@dp.message(Form.waiting_for_student_name)
async def process_student_name(message: Message, state: FSMContext):
    student_name = message.text.strip()
    if not student_name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û.")
        return

    data = await state.get_data()
    students = data.get("students", [])
    students.append(student_name)
    await state.update_data(students=students)

    await message.answer(
        "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–ù—É–∂–Ω–æ –ª–∏ –µ—â–µ –∫–æ–≥–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?",
        reply_markup=create_keyboard(["–î–æ–±–∞–≤–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"])
    )

@dp.message(Form.waiting_for_student_name, F.text.in_(["–î–æ–±–∞–≤–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"]))
async def finish_input(message: Message, state: FSMContext):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞:")
        return

    data = await state.get_data()
    students = data.get("students", [])
    recipient_id = data.get("recipient_id")

    if not students:
        await message.answer("–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    student_list = "\n".join(students)
    await bot.send_message(recipient_id, f"–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n{student_list}")
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
    await state.clear()

if __name__ == "__main__":
    dp.run_polling(bot)
