from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from states import Form
from utils import create_keyboard

router = Router()

@router.message(Form.waiting_for_student_name)
async def process_student_name(message: Message, state: FSMContext):
    if message.text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await message.answer("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.waiting_for_schedule_photo)
        return

    if message.text in ["–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–î–æ–±–∞–≤–∏—Ç—å"]:
        return

    student_name = message.text.strip()
    if not student_name:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û.")
        return

    data = await state.get_data()
    students = data.get("students", [])
    students.append(student_name)
    await state.update_data(students=students)
    await message.answer(
        "‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–ù—É–∂–Ω–æ –ª–∏ –µ—â–µ –∫–æ–≥–æ-—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?",
        reply_markup=create_keyboard(["–î–æ–±–∞–≤–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"])
    )

@router.message(Form.waiting_for_student_name, F.text.in_(["–î–æ–±–∞–≤–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å", "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]))
async def finish_input(message: Message, state: FSMContext):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞:")
        return

    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        data = await state.get_data()
        students = data.get("students", [])
        recipient_id = data.get("recipient_id")
        
        if not students:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç!", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return

        student_list = "\n".join([f"{i+1}. {name}" for i, name in enumerate(students)])
        try:
            await message.bot.send_message(recipient_id, f"–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n{student_list}")
            await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", reply_markup=ReplyKeyboardRemove())
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        await state.clear()