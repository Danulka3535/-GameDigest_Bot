from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from states import Form
from database import (
    get_groups,
    register_student,
    is_student_registered,
    register_curator,
    register_headman,
    get_students_by_group,
    save_attendance,
    get_attendance_history,
    get_all_students,
    get_curator_group,
    get_headman_group,
    get_curator_id_by_group
)
from utils import create_inline_keyboard
import logging

router = Router()

# Middleware –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–æ–ª–µ–π
class AuthMiddleware:
    def __init__(self):
        self.allowed_users = self.load_allowed_users()

    def load_allowed_users(self, file_path: str = "allowed_users.txt") -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ Telegram ID –∏ —Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8"""
        allowed_users = {}
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                for line in f:
                    parts = line.strip().split(":")
                    if len(parts) == 2 and parts[0].isdigit():
                        user_id, role = int(parts[0]), parts[1]
                        allowed_users[user_id] = role
        except FileNotFoundError:
            allowed_users = {123456789: "admin"}  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID –∫–∞–∫ admin
            logging.warning("–§–∞–π–ª allowed_users.txt –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π admin.")
        except UnicodeDecodeError:
            logging.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ allowed_users.txt. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è UTF-8.")
            allowed_users = {123456789: "admin"}  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID
        return allowed_users

    async def __call__(self, handler, event: Message | CallbackQuery, data: dict):
        user_id = event.from_user.id
        if event.text == "/register_student":
            return await handler(event, data)  # –†–∞–∑—Ä–µ—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if user_id not in self.allowed_users:
            if isinstance(event, Message):
                await event.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            elif isinstance(event, CallbackQuery):
                await event.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
            return
        data["role"] = self.allowed_users[user_id]
        return await handler(event, data)

router.message.middleware(AuthMiddleware())
router.callback_query.middleware(AuthMiddleware())

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, role: str, bot: Bot):
    if role == "admin":
        await message.answer("üëë –í—ã –∞–¥–º–∏–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_view –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.")
    elif role == "curator":
        group_name = get_curator_group(message.from_user.id)
        buttons = [(f"1. {group_name}", f"group_{group_name}")]
        await message.answer(
            f"üìö –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {group_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —É—á–µ—Ç–∞:",
            reply_markup=create_inline_keyboard(buttons)
        )
    elif role == "headman":
        group_name = get_headman_group(message.from_user.id)
        buttons = [(f"1. {group_name}", f"headman_group_{group_name}")]
        await message.answer(
            f"üë®‚Äçüè´ –í–∞—à–∞ –≥—Ä—É–ø–ø–∞: {group_name}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏:",
            reply_markup=create_inline_keyboard(buttons)
        )
    else:
        if is_student_registered(message.from_user.id):
            await message.answer("üéì –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫—É—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ —Å—Ç–∞—Ä–æ—Å—Ç–µ.")
        else:
            await message.answer("üéì –í—ã —Å—Ç—É–¥–µ–Ω—Ç? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å /register_student")
    await state.clear()

@router.message(Command("register_student"))
async def register_student_cmd(message: Message, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ (–¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º, –Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)"""
    user_id = message.from_user.id
    if is_student_registered(user_id):
        await message.answer("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –î–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å.")
        return
    groups = get_groups()
    group_list = "\n".join(f"{i+1}. {group['name']}" for i, group in enumerate(groups))
    await message.answer(f"üéì –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã:\n{group_list}")
    await state.set_state(Form.waiting_for_group)

@router.message(Form.waiting_for_group)
async def process_group(message: Message, state: FSMContext):
    groups = get_groups()
    try:
        group_idx = int(message.text.strip()) - 1
        if 0 <= group_idx < len(groups):
            group_name = groups[group_idx]["name"]
            await state.update_data(group_name=group_name)
            await message.answer(f"üìã –í—ã –≤—ã–±—Ä–∞–ª–∏ {group_name}. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:")
            await state.set_state(Form.waiting_for_student_name_registration)
        else:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Form.waiting_for_student_name_registration)
async def process_student_name_registration(message: Message, state: FSMContext):
    fio = message.text.strip()
    data = await state.get_data()
    group_name = data["group_name"]
    register_student(message.from_user.id, group_name, fio)
    await message.answer(f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {fio} –≤ –≥—Ä—É–ø–ø–µ {group_name}! –î–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å.")
    await state.clear()

@router.message(Command("register_curator"))
async def register_curator_cmd(message: Message, state: FSMContext, role: str):
    if role not in ["curator", "admin"]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    groups = get_groups()
    group_list = "\n".join(f"{i+1}. {group['name']}" for i, group in enumerate(groups))
    await message.answer(f"üìö –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é –∫—É—Ä–∏—Ä—É–µ—Ç–µ:\n{group_list}")
    await state.set_state(Form.waiting_for_curator_group)

@router.message(Form.waiting_for_curator_group)
async def process_curator_group(message: Message, state: FSMContext, role: str):
    groups = get_groups()
    try:
        group_idx = int(message.text.strip()) - 1
        if 0 <= group_idx < len(groups):
            group_name = groups[group_idx]["name"]
            register_curator(message.from_user.id, group_name)
            await message.answer(f"‚úÖ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã {group_name}!")
            await state.clear()
        else:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Command("register_headman"))
async def register_headman_cmd(message: Message, state: FSMContext, role: str):
    if role not in ["headman", "admin"]:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    groups = get_groups()
    group_list = "\n".join(f"{i+1}. {group['name']}" for i, group in enumerate(groups))
    await message.answer(f"üë®‚Äçüè´ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –≥–¥–µ –≤—ã —Å—Ç–∞—Ä–æ—Å—Ç–∞:\n{group_list}")
    await state.set_state(Form.waiting_for_headman_group)

@router.message(Form.waiting_for_headman_group)
async def process_headman_group(message: Message, state: FSMContext, role: str):
    groups = get_groups()
    try:
        group_idx = int(message.text.strip()) - 1
        if 0 <= group_idx < len(groups):
            group_name = groups[group_idx]["name"]
            await state.update_data(group_name=group_name)
            await message.answer(f"üìã –í—ã –≤—ã–±—Ä–∞–ª–∏ {group_name}. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û:")
            await state.set_state(Form.waiting_for_headman_name)
        else:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Form.waiting_for_headman_name)
async def process_headman_name(message: Message, state: FSMContext):
    fio = message.text.strip()
    data = await state.get_data()
    group_name = data["group_name"]
    register_headman(message.from_user.id, group_name, fio)
    await message.answer(f"‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç–∞—Ä–æ—Å—Ç–∞ {fio} –≥—Ä—É–ø–ø—ã {group_name}!")
    await state.clear()

@router.message(Command("admin_view"))
async def admin_view(message: Message, state: FSMContext, role: str):
    if role != "admin":
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.")
        return
    students = get_all_students()
    response = "üìã –í—Å–µ —Å—Ç—É–¥–µ–Ω—Ç—ã:\n"
    for student in students:
        response += f"ID: {student['telegram_id']}, –§–ò–û: {student['name']}, –ì—Ä—É–ø–ø–∞: {student['group_name']}\n"
    await message.answer(response)
    await state.clear()

@router.message(Command("history"))
async def cmd_history(message: Message, state: FSMContext, role: str):
    user_id = message.from_user.id
    if role == "admin":
        history = get_attendance_history(None)
    elif role == "curator":
        group_name = get_curator_group(user_id)
        history = get_attendance_history(user_id) if group_name else []
    else:
        history = []
    if not history:
        await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    response = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏:\n"
    for entry in history:
        students = "\n".join(f"{i+1}. {student['name']} ({student.get('minutes', '0')} –º–∏–Ω, {student.get('hours', '0')} —á, {student.get('reason', '–Ω–µ—Ç –ø—Ä–∏—á–∏–Ω—ã')})" 
                            for i, student in enumerate(entry["students"]))
        response += (
            f"–î–∞—Ç–∞: {entry['timestamp']}\n"
            f"–ì—Ä—É–ø–ø–∞: {entry['group_name']}\n"
            f"–°—Ç–∞—Ç—É—Å: {entry['status']}\n"
            f"–°—Ç—É–¥–µ–Ω—Ç—ã:\n{students}\n\n"
        )
    await message.answer(response)
    await state.clear()

@router.callback_query(F.data.startswith("group_"))
async def show_students(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    group_name = callback.data.split("_", 1)[1]
    if role == "curator" and get_curator_group(callback.from_user.id) != group_name:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞!", show_alert=True)
        return
    students = get_students_by_group(group_name)
    student_list = "\n".join(f"{i+1}. {student['name']}" for i, student in enumerate(students))
    buttons = [
        ("–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö", f"mark_{group_name}"),
        ("–ù–∞–∑–∞–¥", "back_to_groups")
    ]
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"üìã –ì—Ä—É–ø–ø–∞: {group_name}\n–°—Ç—É–¥–µ–Ω—Ç—ã:\n{student_list}",
        reply_markup=create_inline_keyboard(buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("headman_group_"))
async def headman_show_students(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    group_name = callback.data.split("_", 2)[2]
    if role == "headman" and get_headman_group(callback.from_user.id) != group_name:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞!", show_alert=True)
        return
    students = get_students_by_group(group_name)
    student_list = "\n".join(f"{i+1}. {student['name']}" for i, student in enumerate(students))
    buttons = [
        ("–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö", f"headman_late_{group_name}"),
        ("–û—Ç–º–µ—Ç–∏—Ç—å –Ω–µ —è–≤–∏–≤—à–∏—Ö—Å—è", f"headman_absent_{group_name}"),
        ("–ü—Ä–∏—à–µ–¥—à–∏–µ –Ω–∞ 2-3 –ø–∞—Ä—É", f"headman_late_pair_{group_name}"),
        ("–ù–∞–∑–∞–¥", "back_to_groups")
    ]
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"üìã –ì—Ä—É–ø–ø–∞: {group_name}\n–°—Ç—É–¥–µ–Ω—Ç—ã:\n{student_list}",
        reply_markup=create_inline_keyboard(buttons)
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_groups")
async def back_to_groups(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    if role == "admin":
        groups = get_groups()
        buttons = [(f"{i+1}. {group['name']}", f"group_{group['name']}") for i, group in enumerate(groups)]
    elif role == "curator":
        group_name = get_curator_group(callback.from_user.id)
        buttons = [(f"1. {group_name}", f"group_{group_name}")]
    else:  # headman
        group_name = get_headman_group(callback.from_user.id)
        buttons = [(f"1. {group_name}", f"headman_group_{group_name}")]
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É—á–µ—Ç–∞:",
        reply_markup=create_inline_keyboard(buttons)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("mark_"))
async def mark_attendance(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    group_name = callback.data.split("_", 1)[1]
    if role == "curator" and get_curator_group(callback.from_user.id) != group_name:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞!", show_alert=True)
        return
    await state.update_data(group_name=group_name, students=[])
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"üìã –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã {group_name}, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ (–ø–æ –æ–¥–Ω–æ–º—É):"
    )
    await state.set_state(Form.waiting_for_student_name)

@router.callback_query(F.data.startswith("headman_late_"))
async def headman_mark_late(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    group_name = callback.data.split("_", 2)[2]
    if role == "headman" and get_headman_group(callback.from_user.id) != group_name:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞!", show_alert=True)
        return
    await state.update_data(group_name=group_name, late_students=[])
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"üìã –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞ –≥—Ä—É–ø–ø—ã {group_name}, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–æ–∑–¥–∞–ª (–ø–æ –æ–¥–Ω–æ–º—É):"
    )
    await state.set_state(Form.waiting_for_late_student_name)

@router.callback_query(F.data.startswith("headman_absent_"))
async def headman_mark_absent(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    group_name = callback.data.split("_", 2)[2]
    if role == "headman" and get_headman_group(callback.from_user.id) != group_name:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞!", show_alert=True)
        return
    await state.update_data(group_name=group_name, absent_students=[])
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"üìã –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞ –≥—Ä—É–ø–ø—ã {group_name}, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–∏–ª—Å—è (–ø–æ –æ–¥–Ω–æ–º—É):"
    )
    await state.set_state(Form.waiting_for_absent_student_name)

@router.callback_query(F.data.startswith("headman_late_pair_"))
async def headman_mark_late_pair(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    group_name = callback.data.split("_", 3)[3]
    if role == "headman" and get_headman_group(callback.from_user.id) != group_name:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞!", show_alert=True)
        return
    await state.update_data(group_name=group_name, late_pair_students=[])
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=f"üìã –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞ –≥—Ä—É–ø–ø—ã {group_name}, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–µ–ª –Ω–∞ 2-3 –ø–∞—Ä—É (–ø–æ –æ–¥–Ω–æ–º—É):"
    )
    await state.set_state(Form.waiting_for_late_pair_student_name)

@router.message(Form.waiting_for_student_name)
async def process_student_name(message: Message, state: FSMContext):
    student_name = message.text.strip()
    data = await state.get_data()
    students = data.get("students", [])
    students.append({"name": student_name})
    await state.update_data(students=students)
    buttons = [
        ("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "add_more"),
        ("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "finish")
    ]
    await message.answer(
        f"üë§ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª: {student_name}\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=create_inline_keyboard(buttons)
    )

@router.message(Form.waiting_for_late_student_name)
async def process_late_student_name(message: Message, state: FSMContext):
    student_name = message.text.strip()
    data = await state.get_data()
    late_students = data.get("late_students", [])
    late_students.append({"name": student_name})
    await state.update_data(late_students=late_students, current_student=student_name)
    await message.answer(
        f"üë§ –û–ø–æ–∑–¥–∞–ª: {student_name}\n–ù–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –æ–ø–æ–∑–¥–∞–ª?",
        reply_markup=None
    )
    await state.set_state(Form.waiting_for_late_minutes)

@router.message(Form.waiting_for_late_minutes)
async def process_late_minutes(message: Message, state: FSMContext):
    try:
        minutes = int(message.text.strip())
        data = await state.get_data()
        late_students = data["late_students"]
        current_student = data["current_student"]
        for student in late_students:
            if student["name"] == current_student:
                student["minutes"] = minutes
        await state.update_data(late_students=late_students)
        buttons = [
            ("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "headman_add_more_late"),
            ("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "headman_finish_late")
        ]
        await message.answer(
            f"üë§ –û–ø–æ–∑–¥–∞–ª: {current_student} –Ω–∞ {minutes} –º–∏–Ω\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=create_inline_keyboard(buttons)
        )
        await state.set_state(Form.waiting_for_late_student_name)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç!")

@router.message(Form.waiting_for_absent_student_name)
async def process_absent_student_name(message: Message, state: FSMContext):
    student_name = message.text.strip()
    data = await state.get_data()
    absent_students = data.get("absent_students", [])
    absent_students.append({"name": student_name, "hours": 6})
    await state.update_data(absent_students=absent_students, current_student=student_name)
    buttons = [
        ("–£–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É", "absent_reason"),
        ("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "headman_add_more_absent"),
        ("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "headman_finish_absent")
    ]
    await message.answer(
        f"üë§ –ù–µ —è–≤–∏–ª—Å—è: {student_name} (6 —á)\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=create_inline_keyboard(buttons)
    )

@router.callback_query(F.data == "absent_reason")
async def absent_reason(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    current_student = data["current_student"]
    await bot.send_message(
        callback.message.chat.id,
        f"üìã –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–ª—è {current_student}:"
    )
    await state.set_state(Form.waiting_for_absent_reason)
    await callback.answer()

@router.message(Form.waiting_for_absent_reason)
async def process_absent_reason(message: Message, state: FSMContext):
    reason = message.text.strip()
    data = await state.get_data()
    absent_students = data["absent_students"]
    current_student = data["current_student"]
    for student in absent_students:
        if student["name"] == current_student:
            student["reason"] = reason
    await state.update_data(absent_students=absent_students)
    buttons = [
        ("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "headman_add_more_absent"),
        ("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "headman_finish_absent")
    ]
    await message.answer(
        f"üë§ –ù–µ —è–≤–∏–ª—Å—è: {current_student} (6 —á, –ø—Ä–∏—á–∏–Ω–∞: {reason})\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=create_inline_keyboard(buttons)
    )
    await state.set_state(Form.waiting_for_absent_student_name)

@router.message(Form.waiting_for_late_pair_student_name)
async def process_late_pair_student_name(message: Message, state: FSMContext):
    student_name = message.text.strip()
    data = await state.get_data()
    late_pair_students = data.get("late_pair_students", [])
    late_pair_students.append({"name": student_name})
    await state.update_data(late_pair_students=late_pair_students, current_student=student_name)
    buttons = [
        ("2 –ø–∞—Ä–∞", "pair_2"),
        ("3 –ø–∞—Ä–∞", "pair_3")
    ]
    await message.answer(
        f"üë§ –ü—Ä–∏—à–µ–ª: {student_name}\n–ù–∞ –∫–∞–∫—É—é –ø–∞—Ä—É?",
        reply_markup=create_inline_keyboard(buttons)
    )

@router.callback_query(F.data.in_(["pair_2", "pair_3"]))
async def process_late_pair_number(callback: CallbackQuery, state: FSMContext, bot: Bot):
    pair = 2 if callback.data == "pair_2" else 3
    hours = (pair - 1) * 2
    data = await state.get_data()
    late_pair_students = data["late_pair_students"]
    current_student = data["current_student"]
    for student in late_pair_students:
        if student["name"] == current_student:
            student["pair"] = pair
            student["hours"] = hours
    await state.update_data(late_pair_students=late_pair_students)
    buttons = [
        ("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", "headman_add_more_late_pair"),
        ("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "headman_finish_late_pair")
    ]
    await bot.send_message(
        callback.message.chat.id,
        f"üë§ –ü—Ä–∏—à–µ–ª –Ω–∞ {pair} –ø–∞—Ä—É: {current_student} ({hours} —á –ø—Ä–æ–≥—É–ª–∞)\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=create_inline_keyboard(buttons)
    )
    await state.set_state(Form.waiting_for_late_pair_student_name)
    await callback.answer()

@router.callback_query(F.data == "add_more")
async def add_more_students(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    group_name = data["group_name"]
    await bot.send_message(
        callback.message.chat.id,
        f"üìã –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:"
    )
    await callback.answer()

@router.callback_query(F.data == "headman_add_more_absent")
async def headman_add_more_absent(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    group_name = data["group_name"]
    await bot.send_message(
        callback.message.chat.id,
        f"üìã –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ —è–≤–∏–≤—à–µ–≥–æ—Å—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:"
    )
    await callback.answer()

@router.callback_query(F.data == "headman_add_more_late")
async def headman_add_more_late(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    group_name = data["group_name"]
    await bot.send_message(
        callback.message.chat.id,
        f"üìã –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø–æ–∑–¥–∞–≤—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:"
    )
    await callback.answer()

@router.callback_query(F.data == "headman_add_more_late_pair")
async def headman_add_more_late_pair(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    group_name = data["group_name"]
    await bot.send_message(
        callback.message.chat.id,
        f"üìã –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø—Ä–∏—à–µ–¥—à–µ–≥–æ –Ω–∞ 2-3 –ø–∞—Ä—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:"
    )
    await callback.answer()

@router.callback_query(F.data == "finish")
async def finish_attendance(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    data = await state.get_data()
    group_name = data["group_name"]
    students = data.get("students", [])
    if not students:
        await bot.send_message(
            callback.message.chat.id,
            "‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start."
        )
        await state.clear()
        return
    save_attendance(callback.from_user.id, group_name, students, "present")
    student_list = "\n".join(f"{i+1}. {student['name']}" for i, student in enumerate(students))
    await bot.send_message(
        callback.message.chat.id,
        f"‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n{student_list}"
    )
    buttons = [(f"1. {group_name}", f"group_{group_name}")]
    await bot.send_message(
        callback.message.chat.id,
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ—Ç–∫–∏:",
        reply_markup=create_inline_keyboard(buttons)
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "headman_finish_absent")
async def headman_finish_absent(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    data = await state.get_data()
    group_name = data["group_name"]
    absent_students = data.get("absent_students", [])
    if not absent_students:
        await bot.send_message(
            callback.message.chat.id,
            "‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start."
        )
        await state.clear()
        return
    save_attendance(callback.from_user.id, group_name, absent_students, "absent")
    absent_list = "\n".join(f"{i+1}. {student['name']} ({student.get('reason', '–Ω–µ—Ç –ø—Ä–∏—á–∏–Ω—ã')})" 
                            for i, student in enumerate(absent_students))
    curator_id = get_curator_id_by_group(group_name)
    if curator_id:
        await bot.send_message(
            curator_id,
            f"üìã –û—Ç –†–æ–º—ã (—Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã {group_name}):\n–ù–µ —è–≤–∏–ª–∏—Å—å (6 —á):\n{absent_list}"
        )
    await bot.send_message(
        callback.message.chat.id,
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä—É:\n{absent_list}"
    )
    buttons = [(f"1. {group_name}", f"headman_group_{group_name}")]
    await bot.send_message(
        callback.message.chat.id,
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ—Ç–∫–∏:",
        reply_markup=create_inline_keyboard(buttons)
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "headman_finish_late")
async def headman_finish_late(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    data = await state.get_data()
    group_name = data["group_name"]
    late_students = data.get("late_students", [])
    if not late_students:
        await bot.send_message(
            callback.message.chat.id,
            "‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start."
        )
        await state.clear()
        return
    save_attendance(callback.from_user.id, group_name, late_students, "late")
    late_list = "\n".join(f"{i+1}. {student['name']} ({student['minutes']} –º–∏–Ω)" 
                          for i, student in enumerate(late_students))
    curator_id = get_curator_id_by_group(group_name)
    if curator_id:
        await bot.send_message(
            curator_id,
            f"üìã –û—Ç –†–æ–º—ã (—Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã {group_name}):\n–û–ø–æ–∑–¥–∞–ª–∏:\n{late_list}"
        )
    await bot.send_message(
        callback.message.chat.id,
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–± –æ–ø–æ–∑–¥–∞–≤—à–∏—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä—É:\n{late_list}"
    )
    buttons = [(f"1. {group_name}", f"headman_group_{group_name}")]
    await bot.send_message(
        callback.message.chat.id,
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ—Ç–∫–∏:",
        reply_markup=create_inline_keyboard(buttons)
    )
    await state.clear()
    await callback.answer()

@router.callback_query(F.data == "headman_finish_late_pair")
async def headman_finish_late_pair(callback: CallbackQuery, state: FSMContext, bot: Bot, role: str):
    data = await state.get_data()
    group_name = data["group_name"]
    late_pair_students = data.get("late_pair_students", [])
    if not late_pair_students:
        await bot.send_message(
            callback.message.chat.id,
            "‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start."
        )
        await state.clear()
        return
    save_attendance(callback.from_user.id, group_name, late_pair_students, "late_pair")
    late_pair_list = "\n".join(f"{i+1}. {student['name']} (–ø—Ä–∏—à–µ–ª –Ω–∞ {student['pair']} –ø–∞—Ä—É, {student['hours']} —á)" 
                               for i, student in enumerate(late_pair_students))
    curator_id = get_curator_id_by_group(group_name)
    if curator_id:
        await bot.send_message(
            curator_id,
            f"üìã –û—Ç –†–æ–º—ã (—Å—Ç–∞—Ä–æ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã {group_name}):\n–ü—Ä–∏—à–µ–¥—à–∏–µ –Ω–∞ 2-3 –ø–∞—Ä—É:\n{late_pair_list}"
        )
    await bot.send_message(
        callback.message.chat.id,
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏—à–µ–¥—à–∏—Ö –Ω–∞ 2-3 –ø–∞—Ä—É –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫—É—Ä–∞—Ç–æ—Ä—É:\n{late_pair_list}"
    )
    buttons = [(f"1. {group_name}", f"headman_group_{group_name}")]
    await bot.send_message(
        callback.message.chat.id,
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–º–µ—Ç–∫–∏:",
        reply_markup=create_inline_keyboard(buttons)
    )
    await state.clear()
    await callback.answer()