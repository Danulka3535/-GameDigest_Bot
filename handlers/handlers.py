from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from aiogram.fsm.storage.base import StorageKey
from states import Form
from database import create_pending_request, get_pending_request, update_pending_request, save_attendance_data
from utils import check_user_exists, create_keyboard, create_inline_keyboard
import datetime
import logging

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É—á–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.\n–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ? –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
    await state.set_state(Form.waiting_for_recipient_username)

@router.message(Form.waiting_for_recipient_username)
async def process_recipient_username(message: Message, state: FSMContext, bot: Bot):
    recipient_username = message.text.strip().lstrip('@')
    exists, user_id = await check_user_exists(recipient_username, bot)
    
    if not exists or user_id is None:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username:")
        return
    
    request_id = create_pending_request(message.from_user.id, user_id)
    await state.update_data(recipient_id=user_id, request_id=str(request_id))
    
    buttons = [("–ü—Ä–∏–Ω—è—Ç—å", f"accept_{request_id}"), ("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"decline_{request_id}")]
    await bot.send_message(
        chat_id=user_id,
        text=f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:",
        reply_markup=create_inline_keyboard(buttons)
    )
    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
    await state.set_state(Form.waiting_for_confirmation)

@router.callback_query(F.data.startswith("accept_") | F.data.startswith("decline_"))
async def handle_confirmation(
    callback: CallbackQuery, 
    bot: Bot,
    state: FSMContext
):
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è callback –≤ offset-naive (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã)
        callback_time = callback.message.date.replace(tzinfo=None)
        current_time = datetime.datetime.now()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (offset-naive)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π callback (–±–æ–ª–µ–µ 48 —á–∞—Å–æ–≤)
        if (current_time - callback_time).total_seconds() > 172800:
            await callback.answer("‚ùå –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ!")
            return

        action, request_id = callback.data.split("_", 1)
        request = get_pending_request(request_id)
        
        if not request:
            await callback.answer("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        if callback.from_user.id != request["recipient_id"]:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—å!")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        update_pending_request(request_id, "accepted" if action == "accept" else "rejected")
        
        # –ü–æ–ª—É—á–∞–µ–º storage –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        storage = state.storage
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_id = request["sender_id"]
        sender_state = FSMContext(
            storage=storage,
            key=StorageKey(chat_id=sender_id, user_id=sender_id, bot_id=bot.id)
        )
        
        if action == "accept":
            await sender_state.set_state(Form.waiting_for_student_name)
            await bot.send_message(sender_id, "‚úÖ –í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—â–µ–≥–æ—Å—è:")
        else:
            await sender_state.set_state(Form.waiting_for_recipient_username)
            await bot.send_message(sender_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username:")
            
        await callback.answer()
        await callback.message.delete()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")

@router.message(Form.waiting_for_student_name)
async def process_student_name(message: Message, state: FSMContext):
    student_name = message.text.strip()
    data = await state.get_data()
    students = data.get("students", [])
    students.append(student_name)
    
    await state.update_data(students=students)
    await message.answer(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω: {student_name}\n–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                        reply_markup=create_keyboard(["–î–æ–±–∞–≤–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"]))
    await state.set_state(Form.waiting_for_add_more)

@router.message(Form.waiting_for_add_more)
async def process_add_more(message: Message, state: FSMContext, bot: Bot):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—â–µ–≥–æ—Å—è:")
        await state.set_state(Form.waiting_for_student_name)
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        data = await state.get_data()
        students = data.get("students", [])
        
        if not students:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
            
        save_attendance_data(
            sender_id=message.from_user.id,
            recipient_id=data["recipient_id"],
            students=students
        )
        
        await bot.send_message(
            data["recipient_id"],
            f"üìä –î–∞–Ω–Ω—ã–µ –æ—Ç @{message.from_user.username}:\n" + "\n".join(f"‚Ä¢ {s}" for s in students)
        )
        
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
        await state.clear()