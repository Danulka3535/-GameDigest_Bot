# main.py
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from middlewares.message_logger import MessageLoggerMiddleware  # –ò–º–ø–æ—Ä—Ç –º–∏–¥–ª–≤–∞—Ä–∏
from handlers import router  # –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞ –∏–∑ handlers.py
from database import init_db
from config import BOT_TOKEN
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import logging
logging.basicConfig(level=logging.INFO)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∏–¥–ª–≤–∞—Ä–∏
dp.update.outer_middleware(MessageLoggerMiddleware())
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    dp.run_polling(bot)

# config.py
from database import register_user
BOT_TOKEN = "7664076869:AAF02jlQCnD7NRVI1v-z9A4uFhIcbClq-bQ"
YOUR_USER_ID = "user_id"
REGISTERED_USERS = {
    "user1": 123456789,
    "user2": 987654321,
}

# handlers/__init__.py
from .handlers import router
from utils import create_keyboard, check_user_exists
__all__ = ["router"]

# handlers/handlers.py
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from states import Form
from database import create_pending_request, get_pending_request, update_pending_request, save_attendance_data
from utils import check_user_exists, create_keyboard, create_inline_keyboard
from aiogram.fsm.storage.base import StorageKey

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —É—á–µ—Ç –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏.\n–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ? –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username):")
    await state.set_state(Form.waiting_for_recipient_username)

@router.message(Form.waiting_for_recipient_username)
async def process_recipient_username(message: Message, state: FSMContext, bot: Bot):
    recipient_username = message.text.strip().lstrip('@')
    exists, user_id = await check_user_exists(recipient_username, bot)
    
    if not exists or user_id is None:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username:")
        return
    
    request_id = create_pending_request(message.from_user.id, user_id)
    await state.update_data(recipient_id=user_id, request_id=str(request_id))
    
    buttons = [("–ü—Ä–∏–Ω—è—Ç—å", f"accept_{request_id}"), ("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", f"decline_{request_id}")]
    await bot.send_message(
        chat_id=user_id,
        text=f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:",
        reply_markup=create_inline_keyboard(buttons)
    )
    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
    await state.set_state(Form.waiting_for_confirmation)

@router.callback_query(F.data.startswith("accept_") | F.data.startswith("decline_"))
async def handle_confirmation(callback: CallbackQuery, bot: Bot, state: FSMContext):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –∏ request_id
        action, request_id = callback.data.split("_", 1)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        request = get_pending_request(request_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å
        if not request:
            await callback.answer("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
        if callback.from_user.id != request["recipient_id"]:
            await callback.answer("‚ö†Ô∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
        update_pending_request(request_id, "accepted" if action == "accept" else "rejected")
        
        # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_id = request["sender_id"]
        
        # –£–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_state = FSMContext(bot.storage, StorageKey(sender_id, sender_id, bot.id))
        
        if action == "accept":
            await sender_state.set_state(Form.waiting_for_student_name)
            await bot.send_message(sender_id, "‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—â–µ–≥–æ—Å—è:")
        else:
            await sender_state.set_state(Form.waiting_for_recipient_username)
            await bot.send_message(sender_id, "‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω. –í–≤–µ–¥–∏—Ç–µ username –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:")
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await callback.answer()
        await callback.message.delete()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirmation: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

@router.message(Form.waiting_for_student_name)
async def process_student_name(message: Message, state: FSMContext):
    student_name = message.text.strip()
    data = await state.get_data()
    students = data.get("students", [])
    students.append(student_name)
    
    await state.update_data(students=students)
    await message.answer(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω: {student_name}\n–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?",
                        reply_markup=create_keyboard(["–î–æ–±–∞–≤–∏—Ç—å", "–ó–∞–≤–µ—Ä—à–∏—Ç—å"]))
    await state.set_state(Form.waiting_for_add_more)

@router.message(Form.waiting_for_add_more)
async def process_add_more(message: Message, state: FSMContext, bot: Bot):
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—á–∞—â–µ–≥–æ—Å—è:", reply_markup=None)
        await state.set_state(Form.waiting_for_student_name)
    elif message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å":
        data = await state.get_data()
        students = data.get("students", [])
        
        if len(students) == 0:
            await message.answer("‚ùå –°–ø–∏—Å–æ–∫ —É—á–∞—â–∏—Ö—Å—è –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=None)
            await state.clear()
            return
        
        save_attendance_data(
            sender_id=message.from_user.id,
            recipient_id=data["recipient_id"],
            students=students
        )
        
        await bot.send_message(
            chat_id=data["recipient_id"],
            text=f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –æ—Ç @{message.from_user.username}:\n" + "\n".join(f"‚Ä¢ {s}" for s in students)
        )
        
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", reply_markup=None)
        await state.clear()

# message_logger.py
# middlewares/message_logger.py
import datetime
from pathlib import Path
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update

class MessageLoggerMiddleware(BaseMiddleware):
    def __init__(self, log_file: str = "user_messages.txt"):
        self.log_file = Path(log_file)
        self.log_file.parent.mkdir(exist_ok=True, parents=True)

    async def __call__(self, handler, event: Update, data):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–º
        if isinstance(event, Message):
            user_id = event.from_user.id
            username = event.from_user.username
            text = event.text or "No text"
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
            username = event.from_user.username
            text = event.data
        else:
            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç from_user, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            return await handler(event, data)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        log_entry = (
            f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]\n"
            f"User ID: {user_id}\n"
            f"Username: @{username}\n"
            f"Message: {text}\n"
            "\n"
        )
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(log_entry)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
        return await handler(event, data)

# middlewares/message_logger.py
import datetime
from pathlib import Path
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update

class MessageLoggerMiddleware(BaseMiddleware):
    def __init__(self, log_file: str = "user_messages.txt"):
        self.log_file = Path(log_file)
        self.log_file.parent.mkdir(exist_ok=True, parents=True)

    async def __call__(self, handler, event: Update, data):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–º
        if isinstance(event, Message):
            user_id = event.from_user.id
            username = event.from_user.username
            text = event.text or "No text"
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
            username = event.from_user.username
            text = event.data
        else:
            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç from_user, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            return await handler(event, data)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        log_entry = (
            f"[{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}]\n"
            f"User ID: {user_id}\n"
            f"Username: @{username}\n"
            f"Message: {text}\n"
            "\n"
        )
        with open(self.log_file, "a", encoding="utf-8") as f:
            f.write(log_entry)
        
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è
        return await handler(event, data)

# utils.py
import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from database import find_user_by_username

def create_keyboard(buttons):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=btn)] for btn in buttons],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def create_inline_keyboard(buttons: list[tuple[str, str]]) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ (—Ç–µ–∫—Å—Ç, callback_data)"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=text, callback_data=data) for text, data in buttons]
    ])

async def check_user_exists(username: str, bot) -> tuple[bool, int | None]:
    username = username.lstrip('@')
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = find_user_by_username(username)
    if user:
        return True, user["id"]
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Telegram API
        chat = await bot.get_chat(f"@{username}")
        if chat.type != "private":
            return False, None
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        await bot.send_chat_action(chat.id, "typing")
        return True, chat.id
    except TelegramBadRequest as e:
        if "user not found" in str(e).lower():
            return False, None
        elif "bot was blocked" in str(e).lower():
            return False, None
        else:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
            return False, None
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False, None

# states.py
from aiogram.fsm.state import State, StatesGroup

class Form(StatesGroup):
    waiting_for_recipient_username = State()
    waiting_for_confirmation = State()
    waiting_for_recipient_response = State()
    waiting_for_student_name = State()
    waiting_for_schedule_photo = State()
    waiting_for_schedule = State()
    waiting_for_add_more = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
